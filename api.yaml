# MIT License

# Copyright (c) 2019 Eric Johnson

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

openapi: "3.0.1"
info:
  title: "URL Shortener"
  version: "1.0.0"

paths:
  /{linkId}:
    ## URL redirector
    get:
      responses:
        "302":
          description: "302 redirect"
          headers:
            Location:
              schema:
                type: "string"
      
      ## API Gateway Integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBReadRole, Arn ]
        uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"}
        httpMethod: "POST"
        requestTemplates:
          application/json: {"Fn::Sub": "{\"Key\": {\"id\": {\"S\": \"$input.params().path.linkId\"}}, \"TableName\": \"${LinkTable}\"}"}
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "302"
            responseParameters:
              method.response.header.Location: { "Fn::Sub": "'${ClientDomain}'" }
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$')) \
                #if($inputRoot.toString().contains(\"Item\")) \
                #set($context.responseOverride.header.Location = $inputRoot.Item.url.S) \
                #end"
        type: "aws"

  /app:
    ## Get all links for user
    get:
      security:
      - UserAuthorizer: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"

      ## API Gateway Integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBReadRole, Arn ]
        uri: {"Fn::Sub":"arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"}
        httpMethod: "POST"
        requestTemplates:
          application/json: { "Fn::Sub": "{\"TableName\": \"${LinkTable}\", \
            \"IndexName\":\"OwnerIndex\",\"KeyConditionExpression\": \"#n_owner = :v_owner\", \
            \"ExpressionAttributeValues\": \
            {\":v_owner\": {\"S\": \"$context.authorizer.claims.email\"}},\"ExpressionAttributeNames\": {\"#n_owner\": \"owner\"}}"}
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))[ \
                #foreach($elem in $inputRoot.Items) { \
                  \"id\":\"$elem.id.S\", \
                  \"url\": \"$elem.url.S\", \
                  \"timestamp\": \"$elem.timestamp.S\", \
                  \"owner\": \"$elem.owner.S\"} \
                #if($foreach.hasNext),#end \
                #end]"
        type: "AWS"

    ## Create a new link
    post:
      security:
      - UserAuthorizer: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"

      ## API Gateway integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBCrudRole, Arn ]
        uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem" }
        httpMethod: "POST"
        requestTemplates:
          application/json: { "Fn::Sub": "{\"TableName\": \"${LinkTable}\",\
            \"ConditionExpression\":\"attribute_not_exists(id)\", \
            \"Key\": {\"id\": {\"S\": $input.json('$.id')}}, \
            \"ExpressionAttributeNames\": {\"#u\": \"url\",\"#o\": \"owner\",\"#ts\": \"timestamp\"}, \
            \"ExpressionAttributeValues\":{\":u\": {\"S\": $input.json('$.url')},\":o\": {\"S\": \"$context.authorizer.claims.email\"},\":ts\": {\"S\": \"$context.requestTime\"}}, \
            \"UpdateExpression\": \"SET #u = :u, #o = :o, #ts = :ts\", \
            \"ReturnValues\": \"ALL_NEW\"}" }
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$')) \
                #if($inputRoot.toString().contains(\"ConditionalCheckFailedException\")) \
                {\"error\": true,\"message\": \"Link Id already exists\"}#else \
                {\"id\":\"$inputRoot.Attributes.id.S\", \
                \"url\":\"$inputRoot.Attributes.url.S\",
                \"timestamp\":\"$inputRoot.Attributes.timestamp.S\", \
                \"owner\":\"$inputRoot.Attributes.owner.S\"}#end"
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplate:
              application/json: "{\"error\": {\"message\":\"Incorrect value passed for 'id' or 'url'.\"}}"
        type: "aws"

    ## Options for get and post that do not have a linkId
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST, GET, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              # method.response.header.Access-Control-Allow-Origin: { "Fn::Sub": "'${ClientDomain}'" }
              method.response.header.Access-Control-Allow-Origin: "'*'"
        type: "mock"

  /app/{linkId}:
    ## Delete link
    delete:
      security:
      - UserAuthorizer: []
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
      
      ## AOI gateway integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBCrudRole, Arn ]
        uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem" }
        httpMethod: "POST"
        requestTemplates:
          application/json: { "Fn::Sub":  "{\"Key\": {\"id\": {\"S\": \"$input.params().path.linkId\"}}, \
            \"TableName\": \"${LinkTable}\", \
            \"ConditionExpression\": \"#owner = :owner\", \
            \"ExpressionAttributeValues\":{\":owner\": {\"S\": \"$context.authorizer.claims.email\"}}, \
            \"ExpressionAttributeNames\": {\"#owner\": \"owner\"}}" }
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          "400":
            statusCode: "400"
            responseTemplates:
              application/json: "{\"error\": {\"message\":\"Either you do not have permission to do this operation or a parameter is missing\"}}"
        type: "aws"
    ## Update links
    put:
      security:
      - UserAuthorizer: []
      responses:
        "200":
          description: "301 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        "400":
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      
      ## API gateway integration
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ DDBCrudRole, Arn ]
        uri: { "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem" }
        httpMethod: "POST"
        requestTemplates:
          application/json: { "Fn::Sub": "{\"TableName\": \"${LinkTable}\",\
            \"Key\": {\"id\": {\"S\": $input.json('$.id')}}, \
            \"ExpressionAttributeNames\": {\"#u\": \"url\", \"#owner\": \"owner\"}, \
            \"ExpressionAttributeValues\":{\":u\": {\"S\": $input.json('$.url')}, \":owner\": {\"S\": \"$context.authorizer.claims.email\"}}, \
            \"UpdateExpression\": \"SET #u = :u\", \
            \"ReturnValues\": \"ALL_NEW\", \
            \"ConditionExpression\": \"#owner = :owner\"}" }
        passthroughBehavior: "when_no_templates"
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$')) \
                {\"id\":\"$inputRoot.Attributes.id.S\", \
                \"url\":\"$inputRoot.Attributes.url.S\",
                \"timestamp\":\"$inputRoot.Attributes.timestamp.S\", \
                \"owner\":\"$inputRoot.Attributes.owner.S\"}"
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            application/json: "{\"error\": {\"message\":\"Either you do not have permission to do this operation or a parameter is missing\"}}"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json: "{\"statusCode\" : 200}"
        passthroughBehavior: "when_no_match"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT, DELETE, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        type: "mock"

## Authorizer definition
securityDefinitions:
  UserAuthorizer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      providerARNs:
      - Fn::GetAtt: [ UserPool, Arn ]
      type: "cognito_user_pools"